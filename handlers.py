from main import dp
from config import LANG_DICT
from sql import register, show_lang, show_choose, switch_choose, change_famous
from keyboards import all_lang_keyboard_1, all_lang_keyboard_2, main_menu, menu_calling, cancel_keyboard, \
    create_inline_keyboard, create_reply_keyboard

from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.dispatcher.filters import Text, Command

from googletrans import Translator

translator = Translator()
country = ''


@dp.message_handler(Command('start'))
async def start_mes(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è —Ç–≤–æ–π –∫–∞—Ä–º–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫!')
    await message.answer(f'–ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é id({message.from_user.id})')
    flag = await register(message.from_user.id)
    if flag:
        await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    else:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(\n–í—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ')
    await message.answer('Menu:', reply_markup=menu_calling)


@dp.callback_query_handler(text_contains='mainmenu')
async def show_menu(call: CallbackQuery):
    data_handler = await show_lang(call.from_user.id)
    choose_user = (await show_choose(call.from_user.id))[0][0]
    data_normal_view = str(data_handler)[3:-4]
    lang_lst = data_normal_view.split(', ')

    await call.message.answer(f'–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏:'
                              f'\n{(LANG_DICT[lang_lst[0]].capitalize())}\n{LANG_DICT[lang_lst[1]].capitalize()}\n'
                              f'{LANG_DICT[lang_lst[2]].capitalize()}\n{LANG_DICT[lang_lst[3]].capitalize()}'
                              )
    await call.message.answer(f'–í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {LANG_DICT[choose_user].capitalize()}', reply_markup=main_menu)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞')


@dp.message_handler()
async def choose_source(message: Message):
    data_handler = await show_lang(message.from_user.id)
    data_normal_view = str(data_handler)[3:-4]
    lang_lst = data_normal_view.split(', ')

    '''–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —è–∑—ã–∫–æ–≤'''
    if message.text == 'üî¥ –ò–∑–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ –ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ üî¥':
        await message.answer('üîç', reply_markup=ReplyKeyboardRemove())
        # await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 1:', reply_markup=all_lang_keyboard_1)
        # await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 2:', reply_markup=all_lang_keyboard_2)
        reply_keyboard = await create_reply_keyboard(lang_lst)
        await message.answer('–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏', reply_markup=reply_keyboard)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=cancel_keyboard)

    elif message.text == 'üü° –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ üü°':
        await message.answer('üîç', reply_markup=ReplyKeyboardRemove())
        famous_keyboard = await create_inline_keyboard(lang_lst)
        await message.answer(f'–ò–∑–±—Ä–∞–Ω–Ω—ã–µ —è–∑—ã–∫–∏:', reply_markup=famous_keyboard)
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=cancel_keyboard)

    elif message.text[0] in 'üçèüçáüççüçÖ':
        await message.answer('OK', reply_markup=ReplyKeyboardRemove())
        global country
        country = message.text[2:]
        await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 1:', reply_markup=all_lang_keyboard_1)
        await message.answer('–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ 2:', reply_markup=all_lang_keyboard_2)
        await message.answer(f'–ú–µ–Ω—è–µ–º —è–∑—ã–∫: {country}')
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=cancel_keyboard)

    else:
        await message.answer('üîç', reply_markup=ReplyKeyboardRemove())
        translate_lang = (await show_choose(message.from_user.id))[0][0]
        translate_phrase = translator.translate(message.text, dest=translate_lang).text
        await message.answer(f'–¢–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–∫–µ–Ω –Ω–∞ {LANG_DICT[translate_lang].capitalize()}:\n{translate_phrase}', reply_markup=cancel_keyboard)


@dp.callback_query_handler(lambda c: c.data)
async def switch_lang(call: CallbackQuery):
    data_handler = await show_lang(call.from_user.id)
    data_normal_view = str(data_handler)[3:-4]
    lang_lst = data_normal_view.split(', ')
    if call.data in lang_lst:
        wish_lang = call.data
        await switch_choose(call.from_user.id, wish_lang)
        await call.answer(f'–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {(str(LANG_DICT[wish_lang]).capitalize())}')

    elif call.data in LANG_DICT:
        reverse_dict = {v: k for k, v in LANG_DICT.items()}
        await change_famous(call.from_user.id, call.data, reverse_dict[country.lower()])
        await call.message.answer(f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu_calling)


